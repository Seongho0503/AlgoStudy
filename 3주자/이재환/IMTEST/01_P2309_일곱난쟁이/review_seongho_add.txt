// 두 난쟁이 찾기
		for(int i=0;i<8;i++) {
			for(int j=i+1;j<9;j++) {
				if(list.get(i)+list.get(j)==sum-100) {
					list.remove(j);
					list.remove(i);
					// 오름차순 정렬 후 출력
					list.sort(null);
					for(int x: list)
						System.out.println(x);
					return;
				}	
			}
      
    1.  나도 이중 for문 일 때 탈출하는 방법이 거의 없어서
    (break는 하나만 탈출)
    그래서 생각해본 것이 가짜 난쟁이를 찾았을 때 거기서 정렬과 출력하는 부분을 if문 안에 넣고
    return 시켜 시스템을 강제 종료 시켰음
    재환 너 코드로 바꿔봤음 (바깥, 안에 break 다 뺐음)
    
    
  2.  -------------- 내가 말한 이건 다시생각해보니깐 잘못된 거임
    del = sum - 100;
    --> 9명 중 2명을 골랐을때 두명 합이 del이 되는 경우만 고려해야하는것 같아
    --> 난쟁이 한명이 del이 되는 경우를 고려하는건 오답에 가까운듯
    
    3. 여기서  안에 for문이 j<i여서 arr[0]+arr[0] 인 경우는 생기지는 않지만
     재환 네가 말한 i=0,  j= i+1이 좋은 듯 
     for(int i=0;i<8;i++) {
			for(int j=i+1;j<9;j++) {
    재환 네 코드에서 물론 예외는 없지만  
    j는 어차피 i+1 (i보다 항상 앞에 있으니깐)
    i의 범위를 i<8로 잡아도 될 듯 
    물론 그 전에 가짜 난쟁이가 잡히겠지만
    
    4. 백준에서 내 코드 오류 잡았음
    
    아무튼 좋은 코멘트 ㄳㄳ
    
    -------------------------------------------------------------------------------------
    -->for(int i=0; i<arr.length; i++) {
			    for(int j=0; j<i; j++) { 
      	    if(arr[i]!=del && arr[j]!=del && del == arr[i]+arr[j]) { 
    -> 그리고 이부분,
    --> 이렇게 하면 arr[0]+arr[0] 경우도 나오지 않을까 똑같은 놈 2명 뽑는 케이스
    --> 나는 i=0,  j= i+1 이렇게 해서 중복 피했음
